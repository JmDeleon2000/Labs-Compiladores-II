# Generated from yapl.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,43,293,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,1,0,1,0,1,0,1,0,1,0,1,0,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,
        6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,
        10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,
        13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,
        15,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,
        21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,
        25,1,25,1,25,1,25,1,25,1,26,4,26,200,8,26,11,26,12,26,201,1,26,1,
        26,1,27,1,27,1,27,5,27,209,8,27,10,27,12,27,212,9,27,1,27,1,27,1,
        27,1,27,1,27,1,28,1,28,1,28,1,28,5,28,223,8,28,10,28,12,28,226,9,
        28,1,28,4,28,229,8,28,11,28,12,28,230,1,28,1,28,1,29,1,29,1,30,1,
        30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,37,1,
        38,1,38,5,38,266,8,38,10,38,12,38,269,9,38,1,39,1,39,5,39,273,8,
        39,10,39,12,39,276,9,39,1,40,1,40,5,40,280,8,40,10,40,12,40,283,
        9,40,1,40,1,40,1,41,4,41,288,8,41,11,41,12,41,289,1,42,1,42,0,0,
        43,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,1,0,8,3,0,9,10,
        13,13,32,32,2,0,10,10,13,13,1,0,65,90,2,0,65,90,97,122,1,0,97,122,
        4,0,48,57,65,90,95,95,97,122,3,0,10,10,13,13,34,34,1,0,48,57,300,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
        1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,1,87,1,0,0,0,3,93,1,0,0,0,5,102,
        1,0,0,0,7,104,1,0,0,0,9,109,1,0,0,0,11,116,1,0,0,0,13,123,1,0,0,
        0,15,127,1,0,0,0,17,130,1,0,0,0,19,135,1,0,0,0,21,140,1,0,0,0,23,
        143,1,0,0,0,25,149,1,0,0,0,27,154,1,0,0,0,29,159,1,0,0,0,31,166,
        1,0,0,0,33,168,1,0,0,0,35,172,1,0,0,0,37,174,1,0,0,0,39,176,1,0,
        0,0,41,178,1,0,0,0,43,180,1,0,0,0,45,182,1,0,0,0,47,185,1,0,0,0,
        49,187,1,0,0,0,51,192,1,0,0,0,53,199,1,0,0,0,55,205,1,0,0,0,57,218,
        1,0,0,0,59,234,1,0,0,0,61,236,1,0,0,0,63,238,1,0,0,0,65,240,1,0,
        0,0,67,242,1,0,0,0,69,244,1,0,0,0,71,247,1,0,0,0,73,257,1,0,0,0,
        75,259,1,0,0,0,77,263,1,0,0,0,79,270,1,0,0,0,81,277,1,0,0,0,83,287,
        1,0,0,0,85,291,1,0,0,0,87,88,5,99,0,0,88,89,5,108,0,0,89,90,5,97,
        0,0,90,91,5,115,0,0,91,92,5,115,0,0,92,2,1,0,0,0,93,94,5,105,0,0,
        94,95,5,110,0,0,95,96,5,104,0,0,96,97,5,101,0,0,97,98,5,114,0,0,
        98,99,5,105,0,0,99,100,5,116,0,0,100,101,5,115,0,0,101,4,1,0,0,0,
        102,103,5,58,0,0,103,6,1,0,0,0,104,105,5,66,0,0,105,106,5,111,0,
        0,106,107,5,111,0,0,107,108,5,108,0,0,108,8,1,0,0,0,109,110,5,83,
        0,0,110,111,5,116,0,0,111,112,5,114,0,0,112,113,5,105,0,0,113,114,
        5,110,0,0,114,115,5,103,0,0,115,10,1,0,0,0,116,117,5,79,0,0,117,
        118,5,98,0,0,118,119,5,106,0,0,119,120,5,101,0,0,120,121,5,99,0,
        0,121,122,5,116,0,0,122,12,1,0,0,0,123,124,5,73,0,0,124,125,5,110,
        0,0,125,126,5,116,0,0,126,14,1,0,0,0,127,128,5,105,0,0,128,129,5,
        102,0,0,129,16,1,0,0,0,130,131,5,116,0,0,131,132,5,104,0,0,132,133,
        5,101,0,0,133,134,5,110,0,0,134,18,1,0,0,0,135,136,5,101,0,0,136,
        137,5,108,0,0,137,138,5,115,0,0,138,139,5,101,0,0,139,20,1,0,0,0,
        140,141,5,102,0,0,141,142,5,105,0,0,142,22,1,0,0,0,143,144,5,119,
        0,0,144,145,5,104,0,0,145,146,5,105,0,0,146,147,5,108,0,0,147,148,
        5,101,0,0,148,24,1,0,0,0,149,150,5,108,0,0,150,151,5,111,0,0,151,
        152,5,111,0,0,152,153,5,112,0,0,153,26,1,0,0,0,154,155,5,112,0,0,
        155,156,5,111,0,0,156,157,5,111,0,0,157,158,5,108,0,0,158,28,1,0,
        0,0,159,160,5,105,0,0,160,161,5,115,0,0,161,162,5,118,0,0,162,163,
        5,111,0,0,163,164,5,105,0,0,164,165,5,100,0,0,165,30,1,0,0,0,166,
        167,5,126,0,0,167,32,1,0,0,0,168,169,5,110,0,0,169,170,5,111,0,0,
        170,171,5,116,0,0,171,34,1,0,0,0,172,173,5,43,0,0,173,36,1,0,0,0,
        174,175,5,45,0,0,175,38,1,0,0,0,176,177,5,47,0,0,177,40,1,0,0,0,
        178,179,5,42,0,0,179,42,1,0,0,0,180,181,5,60,0,0,181,44,1,0,0,0,
        182,183,5,60,0,0,183,184,5,61,0,0,184,46,1,0,0,0,185,186,5,61,0,
        0,186,48,1,0,0,0,187,188,5,116,0,0,188,189,5,114,0,0,189,190,5,117,
        0,0,190,191,5,101,0,0,191,50,1,0,0,0,192,193,5,102,0,0,193,194,5,
        97,0,0,194,195,5,108,0,0,195,196,5,115,0,0,196,197,5,101,0,0,197,
        52,1,0,0,0,198,200,7,0,0,0,199,198,1,0,0,0,200,201,1,0,0,0,201,199,
        1,0,0,0,201,202,1,0,0,0,202,203,1,0,0,0,203,204,6,26,0,0,204,54,
        1,0,0,0,205,206,5,40,0,0,206,210,5,42,0,0,207,209,9,0,0,0,208,207,
        1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,213,
        1,0,0,0,212,210,1,0,0,0,213,214,5,42,0,0,214,215,5,41,0,0,215,216,
        1,0,0,0,216,217,6,27,0,0,217,56,1,0,0,0,218,219,5,45,0,0,219,220,
        5,45,0,0,220,224,1,0,0,0,221,223,9,0,0,0,222,221,1,0,0,0,223,226,
        1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,228,1,0,0,0,226,224,
        1,0,0,0,227,229,7,1,0,0,228,227,1,0,0,0,229,230,1,0,0,0,230,228,
        1,0,0,0,230,231,1,0,0,0,231,232,1,0,0,0,232,233,6,28,0,0,233,58,
        1,0,0,0,234,235,5,123,0,0,235,60,1,0,0,0,236,237,5,125,0,0,237,62,
        1,0,0,0,238,239,5,40,0,0,239,64,1,0,0,0,240,241,5,41,0,0,241,66,
        1,0,0,0,242,243,5,59,0,0,243,68,1,0,0,0,244,245,5,60,0,0,245,246,
        5,45,0,0,246,70,1,0,0,0,247,248,5,83,0,0,248,249,5,69,0,0,249,250,
        5,76,0,0,250,251,5,70,0,0,251,252,5,95,0,0,252,253,5,84,0,0,253,
        254,5,89,0,0,254,255,5,80,0,0,255,256,5,69,0,0,256,72,1,0,0,0,257,
        258,5,44,0,0,258,74,1,0,0,0,259,260,5,110,0,0,260,261,5,101,0,0,
        261,262,5,119,0,0,262,76,1,0,0,0,263,267,7,2,0,0,264,266,7,3,0,0,
        265,264,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,
        268,78,1,0,0,0,269,267,1,0,0,0,270,274,7,4,0,0,271,273,7,5,0,0,272,
        271,1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,
        80,1,0,0,0,276,274,1,0,0,0,277,281,5,34,0,0,278,280,8,6,0,0,279,
        278,1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,
        284,1,0,0,0,283,281,1,0,0,0,284,285,5,34,0,0,285,82,1,0,0,0,286,
        288,7,7,0,0,287,286,1,0,0,0,288,289,1,0,0,0,289,287,1,0,0,0,289,
        290,1,0,0,0,290,84,1,0,0,0,291,292,5,46,0,0,292,86,1,0,0,0,9,0,201,
        210,224,230,267,274,281,289,1,6,0,0
    ]

class yaplLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    WS = 27
    MULTILINECOMMENT = 28
    COMMENT = 29
    LBRACKET = 30
    RBRACKET = 31
    LPAREN = 32
    RPAREN = 33
    EOS = 34
    ASSIG_OP = 35
    THIS_PTR = 36
    COMA = 37
    NEW = 38
    UDT = 39
    ID = 40
    STR_LIT = 41
    DIGITS = 42
    SUBSCRIPT = 43

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'class'", "'inherits'", "':'", "'Bool'", "'String'", "'Object'", 
            "'Int'", "'if'", "'then'", "'else'", "'fi'", "'while'", "'loop'", 
            "'pool'", "'isvoid'", "'~'", "'not'", "'+'", "'-'", "'/'", "'*'", 
            "'<'", "'<='", "'='", "'true'", "'false'", "'{'", "'}'", "'('", 
            "')'", "';'", "'<-'", "'SELF_TYPE'", "','", "'new'", "'.'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "MULTILINECOMMENT", "COMMENT", "LBRACKET", "RBRACKET", 
            "LPAREN", "RPAREN", "EOS", "ASSIG_OP", "THIS_PTR", "COMA", "NEW", 
            "UDT", "ID", "STR_LIT", "DIGITS", "SUBSCRIPT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "WS", "MULTILINECOMMENT", "COMMENT", "LBRACKET", "RBRACKET", 
                  "LPAREN", "RPAREN", "EOS", "ASSIG_OP", "THIS_PTR", "COMA", 
                  "NEW", "UDT", "ID", "STR_LIT", "DIGITS", "SUBSCRIPT" ]

    grammarFileName = "yapl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


